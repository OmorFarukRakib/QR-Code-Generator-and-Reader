{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","container","marginTop","title","display","justifyContent","alignItems","background","color","padding","btn","marginBottom","App","useState","text","setText","imageURL","setImageURL","scanResultFile","setScanResultFile","scanResultWebCamFile","setScanResultWebCamFile","qrRef","useRef","classes","generateQRCode","a","QRcode","toDataURL","response","console","log","Container","className","Card","CardContent","Grid","spacing","item","xl","lg","md","sm","xs","TextField","label","onChange","e","target","value","Button","variant","onClick","href","download","src","alr","current","openImageDialog","ref","delay","style","width","onError","error","onScan","result","legacyMode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09c07e28.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport {\n  Container,\n  Card,\n  CardContent,\n  Button,\n  makeStyles,\n  TextField,\n  Grid,\n} from \"@material-ui/core\";\nimport QRcode from \"qrcode\";\nimport QRReader from \"react-qr-reader\";\n\nfunction App() {\n  const [text, setText] = useState(\"\");\n  const [imageURL, setImageURL] = useState(\"\");\n  const [scanResultFile, setScanResultFile] = useState(\"\");\n  const [scanResultWebCamFile, setScanResultWebCamFile] = useState(\"\");\n  const qrRef = useRef(null);\n  const classes = useStyles();\n\n  const generateQRCode = async () => {\n    try {\n      const response = await QRcode.toDataURL(text);\n      setImageURL(response);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleErrorFile = (error) => {\n    console.log(error);\n  };\n  const handleScanFile = (result) => {\n    if (result) {\n      setScanResultFile(result);\n    }\n  };\n  const onScanFile = () => {\n    qrRef.current.openImageDialog();\n  };\n\n  const handleErrorWebCamFile = (error) => {\n    console.log(error);\n  };\n  const handleScanWebCamFile = (result) => {\n    if (result) {\n      setScanResultWebCamFile(result);\n    }\n  };\n\n  return (\n    <Container className={classes.container}>\n      <Card>\n        <h2 className={classes.title}>\n          Generate QR code to download and Scan QR code\n        </h2>\n        <CardContent>\n          <Grid container spacing={2}>\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n              <TextField\n                label=\"Enter text here: \"\n                onChange={(e) => setText(e.target.value)}\n              />\n              <Button\n                className={classes.btn}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => generateQRCode()}\n              >\n                Generate QR\n              </Button>\n              <br />\n              <br />\n              <br />\n              {imageURL ? (\n                <a href={imageURL} download>\n                  <img src={imageURL} alr=\"img\" />\n                </a>\n              ) : null}\n            </Grid>\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={onScanFile}\n              >\n                Scan QR code by image\n              </Button>\n              <QRReader\n                ref={qrRef}\n                delay={300}\n                style={{ width: \"100%\" }}\n                onError={handleErrorFile}\n                onScan={handleScanFile}\n                legacyMode\n              />\n              <h3>\n                Scanned Code: <a href={scanResultFile}>{scanResultFile}</a>\n              </h3>\n            </Grid>\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n              <h3>QR Code Scanned by Web Cam</h3>\n              <QRReader\n                delay={300}\n                style={{ width: \"100%\" }}\n                onError={handleErrorWebCamFile}\n                onScan={handleScanWebCamFile}\n              />\n              <h3>\n                The Scanned QR code is:{\" \"}\n                <a href={scanResultWebCamFile}>{scanResultWebCamFile}</a>\n              </h3>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n    </Container>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    marginTop: 10,\n  },\n  title: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    background: \"#3f51b5\",\n    color: \"#fff\",\n    padding: 20,\n  },\n  btn: {\n    marginTop: 10,\n    marginBottom: 20,\n  },\n}));\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}